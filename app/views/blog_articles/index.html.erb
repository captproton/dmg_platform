<style>
  .article-content {
    font-family: 'Inter', sans-serif;
  }
  .masonry {
      display: grid;
      grid-gap: 10px;
      grid-template-columns: repeat(auto-fill, minmax(288px,1fr));
      grid-auto-rows: 0;
  }

  .masonry-item {
      background-color: #eee;
      overflow: hidden;
  }
  .content-inner {
      /* contain link of entire-meta-link */
      position: relative;
  }
  .entire-meta-link {
      position: absolute;
      top: 0;
      left: 0;
      display: block;
      width: 100%;
      z-index: 101;
      height: 100%;
  }        
  .meta-category {
      padding: 20px 30px 0 30px;
      display: block;
      position: relative;
      z-index: 110;
  }
  h3 {
    font-family: Bebas Neue;
    font-size: 35px;
    line-height: 35px;
    font-weight: 400;
  }

  /* slider */

  button {
    cursor: pointer;
    padding: 8px 16px;
    margin: 10px 5px;
    background-color: orange;
  }

  .slider-main {
    display: flex;
    position: relative;
    flex-direction: column;
    width: 100vw;
    height: 50vh;
  }

  .controls {
    padding: 10px;  
    display: flex;
    align-items: center;
    justify-content: center;
    height: 70px;
    min-height: 70px;
  }

  .slides-container {
    position: relative;
    overflow: hidden;  
    display: flex;
    flex: 1;
  }

  .slide {
    position: absolute;
    color: rgba(255,255,255,0.9);
    display: flex;
    height: 100%;
    
    width: calc(100% / 3);
    width: 100%;
  }

  .slides-inner {
    position: relative;
    height: 100%;
    width: 100%;  
    overflow: hidden;
  }

  .post-ref-1 {
    font-size: 33.75px;
    line-height: 37.5px;
    color: #fff;
    font-family: Bebas Neue;
    text-transform: uppercase;
    font-weight: 400;
  }




</style>
            <!--  Thanks GreenSock!   -->

            <div class="slider-main">

            <div class="slides-container">
              <div class="slides-inner">
              <%= render  partial: "blog_articles/hero_slide", collection: @pinned_articles, as: :blog_article %>

              </div>
            </div>
            
          </div>            

<div class="post-area">
    <div class="posts-container">
        <div class="masonry">
            <%= render partial: "blog_articles/article_content_card", collection: @blog_articles, as: :blog_article %>
            <%= render partial: "blog_articles/article_content_card", collection: @blog_articles, as: :blog_article %>
            <%= render partial: "blog_articles/article_content_card", collection: @blog_articles, as: :blog_article %>
        <!-- 
        https://codepen.io/matthias-douwes/pen/VwPVorP -- masonary grid
        -->


        </div>
    </div>
</div>

<!-- gsap libs -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.11.5/gsap.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.11.5/Flip.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.11.5/TextPlugin.min.js"></script>
<script src="https://unpkg.com/gsap@3/dist/Draggable.min.js"></script>


<script>
  gsap.registerPlugin(Draggable);

  var slideDelay = 5.5;
  var slideDuration = 0.3;
  var wrap = true;

  var slides = document.querySelectorAll(".slide");
  var prevButton = document.querySelector("#prevButton");
  var nextButton = document.querySelector("#nextButton");
  var progressWrap = gsap.utils.wrap(0, 1);

  var numSlides = slides.length;

  gsap.set(slides, {
    backgroundColor: "random([red, blue, green, purple, orange, lime, pink])",
    xPercent: i => i * 100
  });

  var wrapX = gsap.utils.wrap(-100, (numSlides - 1) * 100);
  var timer = gsap.delayedCall(slideDelay, autoPlay);

  var animation = gsap.to(slides, {
    xPercent: "+=" + (numSlides * 100),
    duration: 1,
    ease: "none",
    paused: true,
    repeat: -1,
    modifiers: {
      xPercent: wrapX
    }
  });

  var proxy = document.createElement("div");
  var slideAnimation = gsap.to({}, {});
  var slideWidth = 0;
  var wrapWidth = 0;

  var draggable = new Draggable(proxy, {
    trigger: ".slides-container",
    onPress: updateDraggable,
    onDrag: updateProgress,
    onThrowUpdate: updateProgress,
    snap: {     
      x: snapX
    }
  });

  resize();

  window.addEventListener("resize", resize);

  prevButton.addEventListener("click", function() {
    animateSlides(1);
  });

  nextButton.addEventListener("click", function() {
    animateSlides(-1);
  });

  function updateDraggable() {
    timer.restart(true);
    slideAnimation.kill();
    this.update();
  }

  function animateSlides(direction) {
      
    timer.restart(true);
    slideAnimation.kill();
    var x = snapX(gsap.getProperty(proxy, "x") + direction * slideWidth);
    
    slideAnimation = gsap.to(proxy, {
      x: x,
      duration: slideDuration,
      onUpdate: updateProgress
    });  
  }

  function autoPlay() {  
    if (draggable.isPressed || draggable.isDragging || draggable.isThrowing) {
      timer.restart(true);
    } else {
      animateSlides(-1);
    }
  }

  function updateProgress() { 
    animation.progress(progressWrap(gsap.getProperty(proxy, "x") / wrapWidth));
  }

  function snapX(value) {
    let snapped = gsap.utils.snap(slideWidth, value);
    return wrap ? snapped : gsap.utils.clamp(-slideWidth * (numSlides - 1), 0, snapped);
  }

  function resize() {
    
    var norm = (gsap.getProperty(proxy, "x") / wrapWidth) || 0;
    
    slideWidth = slides[0].offsetWidth;
    wrapWidth = slideWidth * numSlides;
    
    wrap || draggable.applyBounds({minX: -slideWidth * (numSlides - 1), maxX: 0});
    
    gsap.set(proxy, {
      x: norm * wrapWidth
    });
    
    animateSlides(0);
    slideAnimation.progress(1);
  }

</script>